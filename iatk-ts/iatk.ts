// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "iatk.proto" (package "main", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message main.PhysicalIdFromStackParams
 */
export interface PhysicalIdFromStackParams {
    /**
     * @generated from protobuf field: string logical_resource_id = 1;
     */
    logicalResourceId: string;
    /**
     * @generated from protobuf field: string stack_name = 2;
     */
    stackName: string;
    /**
     * @generated from protobuf field: string profile = 3;
     */
    profile: string;
    /**
     * @generated from protobuf field: string region = 4;
     */
    region: string;
}
/**
 * @generated from protobuf message main.Request
 */
export interface Request {
    /**
     * @generated from protobuf field: string jsonrpc = 1;
     */
    jsonrpc: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string method = 3;
     */
    method: string;
    /**
     * @generated from protobuf field: main.PhysicalIdFromStackParams params = 4;
     */
    params?: PhysicalIdFromStackParams;
    /**
     * @generated from protobuf field: main.RequestMetadata metadata = 5;
     */
    metadata?: RequestMetadata;
}
/**
 * @generated from protobuf message main.RequestMetadata
 */
export interface RequestMetadata {
    /**
     * @generated from protobuf field: string client = 1;
     */
    client: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
    /**
     * @generated from protobuf field: string caller = 3;
     */
    caller: string;
    /**
     * @generated from protobuf field: string client_version = 4;
     */
    clientVersion: string;
}
/**
 * @generated from protobuf message main.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: string jsonrpc = 1;
     */
    jsonrpc: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: main.PhysicalIdFromStackOutput output = 3;
     */
    output?: PhysicalIdFromStackOutput;
}
/**
 * @generated from protobuf message main.PhysicalIdFromStackOutput
 */
export interface PhysicalIdFromStackOutput {
    /**
     * @generated from protobuf field: string physical_id = 1;
     */
    physicalId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PhysicalIdFromStackParams$Type extends MessageType<PhysicalIdFromStackParams> {
    constructor() {
        super("main.PhysicalIdFromStackParams", [
            { no: 1, name: "logical_resource_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stack_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "profile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "region", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PhysicalIdFromStackParams>): PhysicalIdFromStackParams {
        const message = { logicalResourceId: "", stackName: "", profile: "", region: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhysicalIdFromStackParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhysicalIdFromStackParams): PhysicalIdFromStackParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string logical_resource_id */ 1:
                    message.logicalResourceId = reader.string();
                    break;
                case /* string stack_name */ 2:
                    message.stackName = reader.string();
                    break;
                case /* string profile */ 3:
                    message.profile = reader.string();
                    break;
                case /* string region */ 4:
                    message.region = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhysicalIdFromStackParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string logical_resource_id = 1; */
        if (message.logicalResourceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.logicalResourceId);
        /* string stack_name = 2; */
        if (message.stackName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stackName);
        /* string profile = 3; */
        if (message.profile !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.profile);
        /* string region = 4; */
        if (message.region !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.region);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message main.PhysicalIdFromStackParams
 */
export const PhysicalIdFromStackParams = new PhysicalIdFromStackParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("main.Request", [
            { no: 1, name: "jsonrpc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "params", kind: "message", T: () => PhysicalIdFromStackParams },
            { no: 5, name: "metadata", kind: "message", T: () => RequestMetadata }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { jsonrpc: "", id: "", method: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string jsonrpc */ 1:
                    message.jsonrpc = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string method */ 3:
                    message.method = reader.string();
                    break;
                case /* main.PhysicalIdFromStackParams params */ 4:
                    message.params = PhysicalIdFromStackParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* main.RequestMetadata metadata */ 5:
                    message.metadata = RequestMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string jsonrpc = 1; */
        if (message.jsonrpc !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jsonrpc);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string method = 3; */
        if (message.method !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.method);
        /* main.PhysicalIdFromStackParams params = 4; */
        if (message.params)
            PhysicalIdFromStackParams.internalBinaryWrite(message.params, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* main.RequestMetadata metadata = 5; */
        if (message.metadata)
            RequestMetadata.internalBinaryWrite(message.metadata, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message main.Request
 */
export const Request = new Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestMetadata$Type extends MessageType<RequestMetadata> {
    constructor() {
        super("main.RequestMetadata", [
            { no: 1, name: "client", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "caller", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "client_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestMetadata>): RequestMetadata {
        const message = { client: "", version: "", caller: "", clientVersion: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestMetadata): RequestMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client */ 1:
                    message.client = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                case /* string caller */ 3:
                    message.caller = reader.string();
                    break;
                case /* string client_version */ 4:
                    message.clientVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client = 1; */
        if (message.client !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.client);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        /* string caller = 3; */
        if (message.caller !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.caller);
        /* string client_version = 4; */
        if (message.clientVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.clientVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message main.RequestMetadata
 */
export const RequestMetadata = new RequestMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("main.Response", [
            { no: 1, name: "jsonrpc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "output", kind: "message", T: () => PhysicalIdFromStackOutput }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = { jsonrpc: "", id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string jsonrpc */ 1:
                    message.jsonrpc = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* main.PhysicalIdFromStackOutput output */ 3:
                    message.output = PhysicalIdFromStackOutput.internalBinaryRead(reader, reader.uint32(), options, message.output);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string jsonrpc = 1; */
        if (message.jsonrpc !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jsonrpc);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* main.PhysicalIdFromStackOutput output = 3; */
        if (message.output)
            PhysicalIdFromStackOutput.internalBinaryWrite(message.output, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message main.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhysicalIdFromStackOutput$Type extends MessageType<PhysicalIdFromStackOutput> {
    constructor() {
        super("main.PhysicalIdFromStackOutput", [
            { no: 1, name: "physical_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PhysicalIdFromStackOutput>): PhysicalIdFromStackOutput {
        const message = { physicalId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhysicalIdFromStackOutput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhysicalIdFromStackOutput): PhysicalIdFromStackOutput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string physical_id */ 1:
                    message.physicalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhysicalIdFromStackOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string physical_id = 1; */
        if (message.physicalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.physicalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message main.PhysicalIdFromStackOutput
 */
export const PhysicalIdFromStackOutput = new PhysicalIdFromStackOutput$Type();
